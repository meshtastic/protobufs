syntax = "proto3";

option java_package = "com.geeksville.mesh";
option java_outer_classname = "ConfigProtos";
option optimize_for = LITE_RUNTIME;
option go_package = "github.com/meshtastic/gomeshproto";

message Config {
  /*
   * Configuration
   */
  message DeviceConfig {
    /*
     * Defines the device's role on the Mesh network
     */
    enum Role {
    
      /*
       * Client device role
       */
      CLIENT = 0;
    
      /*
       * Client Mute device role
       *   Same as a client except packets will not hop over this node, does not contribute to routing packets for mesh.
       */
      CLIENT_MUTE = 1;
    
      /*
       * Router device role.
       *   Mesh packets will prefer to be routed over this node. This node will not be used by client apps. 
       *   The wifi/ble radios and the oled screen will be put to sleep.
       */
      ROUTER = 2;
    
      /*
       * Router Client device role
       *   Mesh packets will prefer to be routed over this node. The Router Client can be used as both a Router and an app connected Client.
       */
      ROUTER_CLIENT = 3;
    
    }

    /*
     * Sets the role of node
     */
    Role role = 1;

    /*
     * Disabling this will disable the SerialConsole by not initilizing the StreamAPI
     */
    bool serial_enabled = 2;

    /*
     * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     * Set this to true to leave the debug log outputting even when API is active.
     */
    bool debug_log_enabled = 3;

  }

  /*
   * Position Config
   */
  message PositionConfig {
    /*
     * Bit field of boolean configuration options, indicating which optional
     *   fields to include when assembling POSITION messages
     * Longitude and latitude are always included (also time if GPS-synced)
     * NOTE: the more fields are included, the larger the message will be -
     *   leading to longer airtime and a higher risk of packet loss
     */
    enum PositionFlags {
      /*
       * Required for compilation
       */
      UNSET = 0x0000;
    
      /*
       * Include an altitude value (if available)
       */
      ALTITUDE  = 0x0001;
    
      /*
       * Altitude value is MSL
       */
      ALTITUDE_MSL   = 0x0002;
    
      /*
       * Include geoidal separation
       */
      GEOIDAL_SEPARATION   = 0x0004;
    
      /*
       * Include the DOP value ; PDOP used by default, see below
       */
      DOP       = 0x0008;
    
      /*
       * If POS_DOP set, send separate HDOP / VDOP values instead of PDOP
       */
      HVDOP     = 0x0010;
    
      /*
       * Include number of "satellites in view"
       */
      SATINVIEW = 0x0020;
    
      /*
       * Include a sequence number incremented per packet
       */
      SEQ_NO   = 0x0040;
    
      /*
       * Include positional timestamp (from GPS solution)
       */
      TIMESTAMP = 0x0080;
      
      /*
       * Include positional heading
       * Intended for use with vehicle not walking speeds
       * walking speeds are likely to be error prone like the compass
       */
      HEADING   = 0x0100;
      
      /*
       * Include positional speed
       * Intended for use with vehicle not walking speeds
       * walking speeds are likely to be error prone like the compass
       */
      SPEED     = 0x0200;
    }

    /*
     * We should send our position this often (but only if it has changed significantly)
     * Defaults to 15 minutes
     */
    uint32 position_broadcast_secs = 1;

    /*
     * Adaptive position braoadcast, which is now the default.
     */
    bool position_broadcast_smart_enabled = 2;

    /*
     * If set, this node is at a fixed position.
     * We will generate GPS position updates at the regular interval, but use whatever the last lat/lon/alt we have for the node.
     * The lat/lon/alt can be set by an internal GPS or with the help of the app.
     */
    bool fixed_position = 3;

    /*
     * Is GPS enabled for this node?
     */
    bool gps_enabled = 4;

    /*
     * How often should we try to get GPS position (in seconds)
     * or zero for the default of once every 30 seconds
     * or a very large value (maxint) to update only once at boot.
     */
    uint32 gps_update_interval = 5;
 
    /*
     * How long should we try to get our position during each gps_update_interval attempt?  (in seconds)
     * Or if zero, use the default of 30 seconds.
     * If we don't get a new gps fix in that time, the gps will be put into sleep until  the next gps_update_rate
     * window.
     */
    uint32 gps_attempt_time = 6;
 
    /*
     * Bit field of boolean configuration options for POSITION messages
     * (bitwise OR of PositionFlags)
     */
    uint32 position_flags = 7;

  }

  /*
   * Power Config\
   * See [Power Config](/docs/settings/config/power) for additional power config details.
   */
  message PowerConfig {

    /*
     * If set, we are powered from a low-current source (i.e. solar), so even if it looks like we have power flowing in
     * we should try to minimize power consumption as much as possible.
     * YOU DO NOT NEED TO SET THIS IF YOU'VE set is_router (it is implied in that case).
     * Advanced Option
     */
    bool is_power_saving = 1;

    /*
     * If non-zero, the device will fully power off this many seconds after external power is removed.
     */
    uint32 on_battery_shutdown_after_secs = 2;

    /*
     * Ratio of voltage divider for battery pin eg. 3.20 (R1=100k, R2=220k)
     * Overrides the ADC_MULTIPLIER defined in variant for battery voltage calculation.
     * Should be set to floating point value between 2 and 4
     * Fixes issues on Heltec v2
     */
    float adc_multiplier_override = 3;

    /*
     * Wait Bluetooth Seconds
     * The number of seconds for to wait before turning off BLE in No Bluetooth states
     * 0 for default of 1 minute
     */
    uint32 wait_bluetooth_secs = 4;

    /*
     * Mesh Super Deep Sleep Timeout Seconds
     * While in Light Sleep if this value is exceeded we will lower into super deep sleep 
     * for sds_secs (default 1 year) or a button press
     * 0 for default of two hours, MAXUINT for disabled
     */
    uint32 mesh_sds_timeout_secs = 5;
 
    /*
     * Super Deep Sleep Seconds
     * While in Light Sleep if mesh_sds_timeout_secs is exceeded we will lower into super deep sleep
     * for this value (default 1 year) or a button press
     * 0 for default of one year
     */
    uint32 sds_secs = 6;
 
    /*
     * Light Sleep Seconds
     * In light sleep the CPU is suspended, LoRa radio is on, BLE is off an GPS is on
     * ESP32 Only
     * 0 for default of 300
     */
    uint32 ls_secs = 7;
 
    /*
     * Minimum Wake Seconds
     * While in light sleep when we receive packets on the LoRa radio we will wake and handle them and stay awake in no BLE mode for this value
     * 0 for default of 10 seconds
     */
    uint32 min_wake_secs = 8;

  }

  /*
   * Network Config
   */
  message NetworkConfig {

    enum WiFiMode {
      /*
       * This mode is used to connect to an external WiFi network
       */
      CLIENT = 0;

      /*
       * In this mode the node will operate as an AP (and DHCP server)
       */
      ACCESS_POINT = 1;

      /*
       * If set, the node AP will broadcast as a hidden SSID
       */
      ACCESS_POINT_HIDDEN = 2;
    }

    /*
     * Enable WiFi (disables Bluetooth)
     */
    bool wifi_enabled = 1;

    /*
     * If set, this node will try to join the specified wifi network and
     * acquire an address via DHCP
     */
    WiFiMode wifi_mode = 2;

    /*
     * If set, this node will try to join the specified wifi network and
     * acquire an address via DHCP
     */
    string wifi_ssid = 3;

    /*
     * If set, will be use to authenticate to the named wifi
     */
    string wifi_psk = 4;

    /*
     * NTP server to use if WiFi is conneced, defaults to `0.pool.ntp.org`
     */
    string ntp_server = 5;
  }

  /*
   * Display Config
   */
  message DisplayConfig {
    /*
     * How the GPS coordinates are displayed on the OLED screen.
     */
    enum GpsCoordinateFormat {

      /*
       * GPS coordinates are displayed in the normal decimal degrees format:
       * DD.DDDDDD DDD.DDDDDD
       */
      DEC = 0;

      /*
       * GPS coordinates are displayed in the degrees minutes seconds format:
       * DD°MM'SS"C DDD°MM'SS"C, where C is the compass point representing the locations quadrant
       */
      DMS = 1;

      /*
       * Universal Transverse Mercator format:
       * ZZB EEEEEE NNNNNNN, where Z is zone, B is band, E is easting, N is northing
       */
      UTM = 2;

      /*
       * Military Grid Reference System format:
       * ZZB CD EEEEE NNNNN, where Z is zone, B is band, C is the east 100k square, D is the north 100k square,
       * E is easting, N is northing
       */
      MGRS = 3;

      /*
       * Open Location Code (aka Plus Codes).
       */
      OLC = 4;

      /*
       * Ordnance Survey Grid Reference (the National Grid System of the UK).
       * Format: AB EEEEE NNNNN, where A is the east 100k square, B is the north 100k square,
       * E is the easting, N is the northing
       */
      OSGR = 5;
    }

    /*
     * Unit display preference
     */
    enum DisplayUnits {

      /*
       * Metric (Default)
       */
      METRIC = 0;

      /*
       * Imperial
       */
      IMPERIAL = 1;
    }

    /*
     * Number of seconds the screen stays on after pressing the user button or receiving a message
     * 0 for default of one minute MAXUINT for always on
     */
    uint32 screen_on_secs = 1;

    /*
     * How the GPS coordinates are formatted on the OLED screen.
     */
    GpsCoordinateFormat gps_format = 2;

    /*
     * Automatically toggles to the next page on the screen like a carousel, based the specified interval in seconds.
     * Potentially useful for devices without user buttons.
     */
    uint32 auto_screen_carousel_secs = 3;
    
    /*
     * If this is set, the displayed compass will always point north. if unset, the old behaviour 
     * (top of display is heading direction) is used.
     */
    bool compass_north_top = 4;

    /*
     * Flip screen vertically, for cases that mount the screen upside down
     */
    bool flip_screen = 5;

    /*
     * Perferred display units
     */
    DisplayUnits units = 6;
  }

  /*
   * Lora Config
   */
  message LoRaConfig {

    enum RegionCode {

      /*
       * Region is not set
       */
      UNSET = 0;

      /*
       * United States
       */
      US = 1;

      /*
       * European Union 433mhz
       */
      EU_433 = 2;

      /*
       * European Union 433mhz
       */
      EU_868 = 3;

      /*
       * China
       */
      CN = 4;

      /*
       * Japan
       */
      JP = 5;

      /*
       * Australia / New Zealand
       */
      ANZ = 6;

      /*
       * Korea
       */
      KR = 7;

      /*
       * Taiwan
       */
      TW = 8;

      /*
       * Russia
       */
      RU = 9;

      /*
       * India
       */
      IN = 10;

      /*
       * New Zealand 865mhz
       */
      NZ_865 = 11;

      /*
       * Thailand
       */
      TH = 12;
    }

    /*
     * Standard predefined channel settings
     * Note: these mappings must match ModemPreset Choice in the device code.
     */
    enum ModemPreset {

      /*
       * Long Range - Fast
       */
      LONG_FAST = 0;

      /*
       * Long Range - Slow
       */
      LONG_SLOW = 1;

      /*
       * Very Long Range - Slow
       */
      VERY_LONG_SLOW = 2;

      /*
       * Medium Range - Slow
       */
      MEDIUM_SLOW = 3;

      /*
       * Medium Range - Fast
       */
      MEDIUM_FAST = 4;

      /*
       * Short Range - Slow
       */
      SHORT_SLOW = 5;

      /*
       * Short Range - Fast
       */
      SHORT_FAST = 6;
    }

    /*
     * When enabled, the `modem_preset` fields will be adheared to, else the `bandwidth`/`spread_factor`/`coding_rate`
     * will be taked from their respective manually defined fields
     */
    bool use_preset = 1;

    /*
     * Either modem_config or bandwidth/spreading/coding will be specified - NOT BOTH.
     * As a heuristic: If bandwidth is specified, do not use modem_config.
     * Because protobufs take ZERO space when the value is zero this works out nicely.
     * This value is replaced by bandwidth/spread_factor/coding_rate.
     * If you'd like to experiment with other options add them to MeshRadio.cpp in the device code.
     */
    ModemPreset modem_preset = 2;

    /*
     * Bandwidth in MHz
     * Certain bandwidth numbers are 'special' and will be converted to the
     * appropriate floating point value: 31 -> 31.25MHz
     */
    uint32 bandwidth = 3;

    /*
     * A number from 7 to 12.
     * Indicates number of chirps per symbol as 1<<spread_factor.
     */
    uint32 spread_factor = 4;

    /*
     * The denominator of the coding rate.
     * ie for 4/8, the value is 8. 5/8 the value is 5.
     */
    uint32 coding_rate = 5;

    /*
     * This parameter is for advanced users with advanced test equipment, we do not recommend most users use it.
     * A frequency offset that is added to to the calculated band center frequency.
     * Used to correct for crystal calibration errors.
     */
    float frequency_offset = 6;

    /*
     * The region code for the radio (US, CN, EU433, etc...)
     */
    RegionCode region = 7;

    /*
     * Maximum number of hops. This can't be greater than 7.
     * Default of 3
     */
    uint32 hop_limit = 8;

    /*
     * Disable TX from the LoRa radio. Useful for hot-swapping antennas and other tests.
     * Defaults to false
     */
    bool tx_enabled = 9;

    /*
     * If zero then, use default max legal continuous power (ie. something that won't
     * burn out the radio hardware)
     * In most cases you should use zero here.
     * Units are in dBm.
    */
    int32 tx_power = 10;

    /*
     * This is controlling the actual hardware frequency the radio is transmitting on.
     * Most users should never need to be exposed to this field/concept.
     * A channel number between 1 and NUM_CHANNELS (whatever the max is in the current region).
     * If ZERO then the rule is "use the old channel name hash based
     * algorithm to derive the channel number")
     * If using the hash algorithm the channel number will be: hash(channel_name) %
     * NUM_CHANNELS (Where num channels depends on the regulatory region).
     */
    uint32 channel_num = 11;

    /*
     * For testing it is useful sometimes to force a node to never listen to
     * particular other nodes (simulating radio out of range). All nodenums listed
     * in ignore_incoming will have packets they send droped on receive (by router.cpp)
     */
    repeated uint32 ignore_incoming = 103;

  }

  message BluetoothConfig {

    enum PairingMode {
      /*
       * Device generates a random pin that will be shown on the screen of the device for pairing
       */
      RANDOM_PIN = 0;

      /*
       * Device requires a specified fixed pin for pairing
       */
      FIXED_PIN = 1;

      /*
       * Device requires no pin for pairing
       */
      NO_PIN = 2;
    }

    /*
     * Enable Bluetooth on the device
     */
    bool enabled = 1;

    /*
     * Determines the pairing strategy for the device
     */
    PairingMode mode = 2;

    /*
     * Specified pin for PairingMode.FixedPin
     */
    uint32 fixed_pin = 3;
    
  }

  /*
   * Payload Variant
   */
  oneof payload_variant {

    DeviceConfig device = 1;
    PositionConfig position = 2;
    PowerConfig power = 3;
    NetworkConfig network = 4;
    DisplayConfig display = 5;
    LoRaConfig lora = 6;
    BluetoothConfig bluetooth = 7;

  }
}
