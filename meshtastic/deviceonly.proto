syntax = "proto3";

package meshtastic;

option optimize_for = LITE_RUNTIME;
option java_package = "com.geeksville.mesh";
option java_outer_classname = "DeviceOnly";
option go_package = "github.com/meshtastic/go/generated";
option csharp_namespace = "Meshtastic.Protobufs";
option swift_prefix = "";

import "meshtastic/channel.proto";
import "meshtastic/mesh.proto";

/*
 * This message is never sent over the wire, but it is used for serializing DB
 * state to flash in the device code
 * FIXME, since we write this each time we enter deep sleep (and have infinite
 * flash) it would be better to use some sort of append only data structure for
 * the receive queue and use the preferences store for the other stuff
 */
message DeviceState {

  /*
   * Read only settings/info about this node
   */
  MyNodeInfo my_node = 2;

  /*
   * My owner info
   */
  User owner = 3;

  /*
   * TODO: REPLACE
   */
  repeated NodeInfo node_db = 4;

  /*
   * Received packets saved for delivery to the phone
   */
  repeated MeshPacket receive_queue = 5;

  /*
   * A version integer used to invalidate old save files when we make
   * incompatible changes This integer is set at build time and is private to
   * NodeDB.cpp in the device code.
   */
  uint32 version = 8;

  /*
   * We keep the last received text message (only) stored in the device flash,
   * so we can show it on the screen.
   * Might be null
   */
  MeshPacket rx_text_message = 7;

  /*
   * Used only during development.
   * Indicates developer is testing and changes should never be saved to flash.
   */
  bool no_save = 9;

  /*
   * Some GPSes seem to have bogus settings from the factory, so we always do one factory reset.
   */
  bool did_gps_reset = 11;

}

/*
 * The on-disk saved channels
 */
message ChannelFile {

  /*
   * The channels our node knows about
   */
  repeated Channel channels = 1;

  /*
   * A version integer used to invalidate old save files when we make
   * incompatible changes This integer is set at build time and is private to
   * NodeDB.cpp in the device code.
   */
  uint32 version = 2;
}

/*
 * TODO: REPLACE
 */
enum ScreenFonts {

  /*
   * TODO: REPLACE
   */
  FONT_SMALL = 0;

  /*
   * TODO: REPLACE
   */
  FONT_MEDIUM = 1;

  /*
   * TODO: REPLACE
   */
  FONT_LARGE = 2;
}

/*
 * This can be used for customizing the firmware distribution. If populated,
 * show a secondary bootup screen with cuatom logo and text for 2.5 seconds.
 */
message OEMStore {

  /*
   * The Logo width in Px
   */
  uint32 oem_icon_width = 1;

  /*
   * The Logo height in Px
   */
  uint32 oem_icon_height = 2;

  /*
   * The Logo in xbm bytechar format
   */
  bytes oem_icon_bits = 3;

  /*
   * Use this font for the OEM text.
   */
  ScreenFonts oem_font = 4;

  /*
   * Use this font for the OEM text.
   */
  string oem_text = 5;

  /*
   * The default device encryption key, 16 or 32 byte
   */
  bytes oem_aes_key = 6;
}
